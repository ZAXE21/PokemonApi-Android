// Generated by view binder compiler. Do not edit!
package com.example.pokemonapi.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pokemonapi.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPokemonBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imagePokemon;

  @NonNull
  public final ImageView imagePokemonShiny;

  @NonNull
  public final CardView itemPokemon;

  @NonNull
  public final TextView namePokemon;

  private ItemPokemonBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imagePokemon,
      @NonNull ImageView imagePokemonShiny, @NonNull CardView itemPokemon,
      @NonNull TextView namePokemon) {
    this.rootView = rootView;
    this.imagePokemon = imagePokemon;
    this.imagePokemonShiny = imagePokemonShiny;
    this.itemPokemon = itemPokemon;
    this.namePokemon = namePokemon;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPokemonBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPokemonBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_pokemon, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPokemonBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imagePokemon;
      ImageView imagePokemon = ViewBindings.findChildViewById(rootView, id);
      if (imagePokemon == null) {
        break missingId;
      }

      id = R.id.imagePokemonShiny;
      ImageView imagePokemonShiny = ViewBindings.findChildViewById(rootView, id);
      if (imagePokemonShiny == null) {
        break missingId;
      }

      id = R.id.itemPokemon;
      CardView itemPokemon = ViewBindings.findChildViewById(rootView, id);
      if (itemPokemon == null) {
        break missingId;
      }

      id = R.id.namePokemon;
      TextView namePokemon = ViewBindings.findChildViewById(rootView, id);
      if (namePokemon == null) {
        break missingId;
      }

      return new ItemPokemonBinding((ConstraintLayout) rootView, imagePokemon, imagePokemonShiny,
          itemPokemon, namePokemon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
